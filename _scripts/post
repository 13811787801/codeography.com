#!/usr/bin/env ruby

require 'rubygems'
require 'erb'
require 'time'
require 'cgi' #for CGI.escape
################################################################################
class PostGenerator

  def initialize
    @site_path = Dir.pwd
  end

  def dasherize(camel_cased_word)
    camel_cased_word.to_s.gsub(/::/, '/').
      gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
      gsub(/([a-z\d])([A-Z])/,'\1_\2').
      tr("_", "-").
      tr(" ", "-").
      downcase
  end

  def h1(title)
    "#{title}\n#{"=" * title.length}"
  end

  def title
    CGI.escape @title
  end

  def prompt_user(prompt_text)
    print "#{prompt_text}: "
    user_input = gets
    user_input.strip
  end

  def read_template
    template_file = File.join @site_path, "_templates", "post.markdown.erb"
    if File.exists?(template_file)
      @template = ERB.new(File.read template_file)
    else
      @template = %q{
        ---
        layout: base
        published: true
        title: <%= title %>
        ---

        <%= h1 title %>

      }.gsub(/^  /, '')
    end
  end
  def file_name
    DateTime.now.strftime("%Y-%m-%d-#{dasherize(title)}.markdown")
  end

  def result
    @template.result(binding)
  end

  def edit
    if ENV['EDITOR']
      system("#{ENV['EDITOR']} #{File.join(@site_path, "_posts", file_name)}")
    else
      puts "$EDITOR not set, if you want to edit the post after creating it you need to set this variable"
    end
  end

  def generate(title=nil)
    puts "dasherize: #{dasherize title}"

    read_template

    @title = prompt_user("Title") if title.nil? || title.empty?

    File.open(File.join(@site_path, "_posts", file_name), 'w') {|f| f.write(result) }
    puts "Created new post #{File.join(@site_path, "_posts", file_name)}"

  end
end

################################################################################

help = <<HELP
Jekyll post generator

Basic Command Line Usage:
  jekyll                                                   # . -> ./_site
  jekyll <path to write generated site>                    # . -> <path>
  jekyll <path to source> <path to write generated site>   # <path> -> <path>

  Options:
HELP

require 'optparse'

options = {}

opts = OptionParser.new do |opts|
  opts.banner = help

  opts.on("--version", "Display current version") do
    puts "Version 0.1"
    exit 0
  end
end

opts.parse!

title = ARGV.join(" ")

PostGenerator.new.generate(title)

